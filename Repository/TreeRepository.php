<?php
/**
 * This file is part of the <Core> project.
 *
 * @subpackage   Core
 * @package    Repository
 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
 * @since 2012-03-09
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Sfynx\CoreBundle\Repository;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Translation Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @subpackage   Core
 * @package    Repository
 * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
 */
class TreeRepository extends NestedTreeRepository
{
    /**
     * Value of the  associated translation class.
     *
     * @var string
     */
    private $_entityTranslationName = "";
        
    /**
     * @var Query
     */
    public $onChildrenQuery;
    
    /**
     * List of cached entity configurations
     *
     * @var array
     */
    protected $_configurations = array();
    
    /**
     * @var ContainerInterface
     */
    protected $_container;    
    
    /**
     * {@inheritdoc}
     */
    public function __construct(EntityManager $em, ClassMetadata $class)
    {
        parent::__construct($em, $class);

        if (isset($this->getClassMetadata()->associationMappings['translations']) 
                && !empty($this->getClassMetadata()->associationMappings['translations'])
        ) {
            $this->_entityTranslationName = $this->getClassMetadata()->associationMappings['translations']['targetEntity'];
        }
    }
    
    /**
     * Gets the container instance.
     *
     * @return ContainerInterface
     * @access protected
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    protected function getContainer()
    {
        return $this->_container;
    }
    
    /**
     * Gets the container instance.
     *
     * @return ContainerInterface
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function setContainer($container)
    {
        $this->_container = $container;
        
        return $this;
    }    
    
    /**
     * add where for user roles
     *
     * @param QueryBuilder $query QueryBuilder instance
     * 
     * @return QueryBuilder
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @author Riad Hellal <hellal.riad@gmail.com>
     */
    public function checkRoles(QueryBuilder $query)
    {
        if ( ($this->_container instanceof ContainerInterface)
            && (true === $this->_container->get('security.context')->isGranted('IS_AUTHENTICATED_FULLY'))
            && !($this->_container->get('security.context')->isGranted('ROLE_ADMIN'))    
        ){
            $entity_name = $this->_entityName;
            if (isset($GLOBALS['ENTITIES']['RESTRICTION_BY_ROLES']) 
                    && isset($GLOBALS['ENTITIES']['RESTRICTION_BY_ROLES'][$entity_name])
            ){
                if (is_array($GLOBALS['ENTITIES']['RESTRICTION_BY_ROLES'][$entity_name])){
                    $route = $this->_container->get('request')->get('_route');
                    if ((empty($route) || ($route == "_internal"))) {
                        $locale = $this->_container->get('request')->getLocale();
                        $route  = $this->_container->get('sfynx.tool.route.factory')
                            ->getMatchParamOfRoute('_route', $locale);
                    }
                    if (!in_array($route, $GLOBALS['ENTITIES']['RESTRICTION_BY_ROLES'][$entity_name])){
                        return $query;
                    }
                }
                $user_roles = $this->_container
                        ->get('sfynx.auth.role.factory')
                        ->getAllUserRoles();
                $orModule   = $query->expr()->orx();
                foreach ($user_roles as $key => $role) {
                    $orModule->add($query
                            ->expr()
                            ->like('node.heritage', $query->expr()->literal('%"'.$role.'"%')));
                }
                $query->andWhere($orModule);                            
            }
        }
        
        return $query;
    }    
    
    /**
     * Loads all translations with all translatable
     * fields from the given entity
     *
     * @param string  $locale
     * @param Query   $query
     * @param string  $result = {'array', 'object'}
     * @param boolean $INNER_JOIN
     * @param boolean $FALLBACK
     * @param boolean $lazy_loading
     *      
     * @return array/object of result query
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function findTranslationsByQuery($locale, Query $query, $result = "object", $INNER_JOIN = false, $FALLBACK = true, $lazy_loading = true)
    {
        if (!$query) {
            throw new NotFoundHttpException(sprintf(
                    'Failed to find Tree by id:[%s]',
                    $id
            ));
        }
        $query = $this->setTranslatableHints($query, $locale, $INNER_JOIN, $FALLBACK, $lazy_loading);
        //$query = $this->cacheQuery($query);
        if ($result == 'array') {
            $entities = $query->getArrayResult();
        } elseif ($result == 'object') {
            $entities = $query->getResult();
        } else {
            throw new \InvalidArgumentException("We haven't set the good option value : array or object !");
        }
    
        return $entities;
    }    
    
    /**
     * return query in cache
     *
     * @param Query   $query
     * @param integer $time
     * @param string  $MODE	    [MODE_GET, MODE_PUT , MODE_NORMAL , MODE_REFRESH]	
     * @param boolean $setCacheable
     * @param string  $namespace
     * @param string  $input_hash
     * 
     * @return Query
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function cacheQuery(Query $query, $time = 3600, $MODE = 3 /* \Doctrine\ORM\Cache::MODE_NORMAL */, $setCacheable = true, $namespace = '', $input_hash = '')
    {
    	if (!$query) {
    		throw new \Gedmo\Exception\InvalidArgumentException('Invalide query instance');
    	}
        // create single file from all input
        if (empty($input_hash)) {
            $input_hash = $namespace . sha1(serialize($query->getParameters()) . $query->getSQL());
        }
        $query->useResultCache(true, $time, (string) $input_hash); 
        $query->useQueryCache(true); 
        if (method_exists($query, 'setCacheMode')) {
            $query->setCacheMode($MODE);
        }
        if (method_exists($query, 'setCacheable')) {
            $query->setCacheable($setCacheable);
        }
        
    	return $query;
    } 

    /**
     * Loads all translations with all translatable
     * fields from the given entity
     * 
     * @link https://github.com/l3pp4rd/DoctrineExtensions/blob/master/doc/translatable.md#entity-domain-object
     *
     * @param Query   $query
     * @param string  $locale
     * @param string  $result = {'array', 'object'}
     * @param boolean $INNER_JOIN
     * @param boolean $FALLBACK
     * @param boolean $lazy_loading
     *      
     * @return Query   
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function setTranslatableHints(Query $query, $locale, $INNER_JOIN = false, $FALLBACK = true, $lazy_loading = true)
    {
        // BE CARFULL ::: Strange Issue with Query Hint and APC
        $query->setHint(
            Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        ); // if you use memcache or apc. You should set locale and other options like fallbacks to query through hints. Otherwise the query will be cached with a first used locale
        $query->setHint(
                \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, 
                $locale
        ); // take locale from session or request etc.        
        if ($INNER_JOIN) {
            $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_INNER_JOIN, $INNER_JOIN); // will use INNER joins for translations instead of LEFT joins, so that in case if you do not want untranslated records in your result set for instance.
        }
        if (!$lazy_loading) {
            // to avoid lazy-loading.
            $query->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);
        }
        $query->setHint(
                \Gedmo\Translatable\TranslatableListener::HINT_FALLBACK,
                $FALLBACK
        ); // fallback to default values in case if record is not translated

//        $config = $this->container->get('doctrine')->getManager()->getConfiguration();
//        if ($config->getCustomHydrationMode(TranslationWalker::HYDRATE_OBJECT_TRANSLATION) === null) {
//            $config->addCustomHydrationMode(
//                TranslationWalker::HYDRATE_OBJECT_TRANSLATION,
//                'Gedmo\\Translatable\\Hydrator\\ORM\\ObjectHydrator'
//            );
//        }        
        $query->setHydrationMode(\Gedmo\Translatable\Query\TreeWalker\TranslationWalker::HYDRATE_OBJECT_TRANSLATION);
        $query->setHint(Query::HINT_REFRESH, true);
        
        return $query;
    }  
    
    /**
     * Find a node by its id
     *
     * @param interger $id
     * @param string   $locale
     * @param string   $result = {'array', 'object'}
     * @param boolean  $INNER_JOIN
     * @param boolean  $FALLBACK
     * @param boolean  $lazy_loading
     * 
     * @return array|object
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */  
    public function findNodeOr404($id, $locale, $result = "object", $INNER_JOIN = false, $FALLBACK = true, $lazy_loading = true)
    {
        $query = $this->_em->createQuery("SELECT node FROM {$this->_entityName} node WHERE node.id = :id");
        $query->setParameter('id', $id);
        $query->setMaxResults(1);
        
        return current($this->findTranslationsByQuery($locale, $query, $result, $INNER_JOIN, $FALLBACK, $lazy_loading));
    }
    
    /**
     * Find a translation of an entity by its id
     *
     * @param interger $id
     * @param string   $locale
     * @param string   $result = {'array', 'object'}
     * @param boolean  $INNER_JOIN
     * @param boolean  $FALLBACK
     * @param boolean  $lazy_loading
     * 
     * @return array|object
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function findOneByEntity($locale, $id, $result = "array", $INNER_JOIN = false, $FALLBACK = true, $lazy_loading = true)
    {
    	$qb = $this->_em->createQueryBuilder()
    	->select('node')
    	->from($this->_entityName, 'node')
    	->where('node.id = :id');
    
    	$query = $this->checkRoles($qb)->getQuery();
    
    	$query->setParameter('id', $id);
    	$query->setMaxResults(1);
    
    	return current($this->findTranslationsByQuery($locale, $query, $result, $INNER_JOIN, $FALLBACK, $lazy_loading));
    }    
    
    /**
     * Find all nodes of the tree by params
     *
     * @param string  $locale
     * @param string  $category
     * @param string  $result = {'array', 'object'}
     * @param boolean $INNER_JOIN
     * @param boolean $enabled
     * @param integer $node
     * @param boolean $is_checkRoles
     * @param boolean $iscache
     * 
     * @return object
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function getAllTree($locale, $category = '', $result = "object", $INNER_JOIN = false, $enable = true, $node = null, $is_checkRoles = true, $iscache = false)
    {
        if (!is_null($node)) {
            $query  = $this->childrenQueryBuilder($node);
            if (!empty($category)) {
                $query
                ->andWhere('node.category = :category')
                ->setParameter('category', $category);
            }
            if ($enable) {
                $query
                ->andWhere('node.enabled = :enabled')
                ->setParameter('enabled', 1);
            }            
        } else {
            $meta     = $this->getClassMetadata();
            $config = $this->listener->getConfiguration($this->_em, $meta->name);
            $query  = $this->_em->createQueryBuilder()
            ->select('node')
            ->from($config['useObjectClass'], 'node')
            ->orderBy('node.root, node.lft', 'ASC');
            if (!empty($category)) {
                $query
                ->where('node.category = :category')
                ->setParameter('category', $category);
                if ($enable) {
                    $query
                    ->andWhere('node.enabled = :enabled')
                    ->setParameter('enabled', 1);
                }  
            } elseif (empty($category) && $enable) {
                $query
                ->where('node.enabled = :enabled')
                ->setParameter('enabled', 1);
            }
        }
        if ($is_checkRoles) {
            $query = $this->checkRoles($query);
        }
        if ($result == 'query') {
            return $query;
        } else {
            if ($iscache) {
            	$query = $this->cacheQuery($query->getQuery());
            } else {
            	$query = $query->getQuery();
            }
            
            return $this->findTranslationsByQuery($locale, $query, $result, $INNER_JOIN);
        }
    }   
    
    /**
     * Find all nodes of the tree by params
     *
     * @param integer $node
     * @param string  $locale
     * @param boolean $INNER_JOIN
     * 
     * @return object
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */  
    public function findAllParentChoises($locale, $node = null, $INNER_JOIN = false)
    {
        $dql = "SELECT c FROM {$this->_entityName} c";
        if (!is_null($node)) {
            $subSelect  = "SELECT n FROM {$this->_entityName} n";
            $subSelect .= ' WHERE n.root = '.$node->getRoot();
            $subSelect .= ' AND n.lft BETWEEN '.$node->getLeft().' AND '.$node->getRight();
    
            $dql .= " WHERE c.id NOT IN ({$subSelect})";
        }
        $q     = $this->_em->createQuery($dql);
        $q     = $this->setTranslatableHints($q, $locale, $INNER_JOIN);
        $nodes = $q->getArrayResult();
        
        $indexed = array();
        foreach ($nodes as $node) {
            $indexed[$node['id']] = $node['title'];
        }
        return $indexed;
    }
    
    /**
     * Gets all field values of an entity.
     *
     * @param string $field value of the field table
     * 
     * @return array
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function getArrayAllByField($field)
    {
        $query = $this->createQueryBuilder('a')
        ->select("a.{$field}")
        ->where('a.enabled = :enabled')
        ->andWhere('a.archived = :archived')
        ->setParameters(array(
            'enabled'  => 1,
            'archived' => 0,
        ));
    
        $result = array();
        $data   = $query->getQuery()->getArrayResult();
        if ($data && is_array($data) && count($data)) {
            foreach ($data as $row) {
                if (isset($row[$field]) && !empty($row[$field])) {
                    $result[ $row[$field] ] = $row[$field];
                }
            }
        }
        
        return $result;
    }
    
    /**
     * Gets all entities by one category.
     *
     * @param string  $category
     * @param integer $MaxResults
     * @param boolean $rootOnly
     * 
     * @return QueryBuilder
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     * @since  2012-03-15
     */
    public function getAllByCategory($category = '', $MaxResults = null, $rootOnly = false)
    {
        $query = $this->createQueryBuilder('node')
        ->select('node')
        ->where('node.enabled = :enabled')
        ->andWhere('node.archived = :archived');        
        if ($rootOnly && in_array($rootOnly, array('ASC', 'DESC'))) {
            $config = $this->getConfiguration();
            $query->andWhere('node.' . $config['parent'] . " IS NULL")
            ->orderBy('node.' . $config['root'], $rootOnly);
        }        
        if (!empty($category)) {
            $query->andWhere('node.category = :cat')
            ->setParameters(array(
                'cat'      => $category,
                'enabled'  => 1,
                'archived' => 0,
            ));
        } else {
            $query->setParameters(array(
                'enabled'  => 1,
                'archived' => 0,
            ));
        }    
        if (!is_null($MaxResults)) {
            $query->setMaxResults($MaxResults);
        }
    
        return $query;
    }     
    
    /**
     * Gets all field values of an translation entity.
     *
     * @param integer $id value of the id
     * 
     * @return object
     * @author Riad HELLAL <hellal.riad@gmail.com>
     * @since  2013-05-30
     */
    public function getTranslationsByObjectId($id)
    {
        $query    = $this->_em->createQuery("SELECT p FROM {$this->_entityTranslationName} p  WHERE p.object = :objectId ");
        $query->setParameter('objectId', $id);
        $entities = $query->getResult();    
        if (!is_null($entities)){
            return $entities;
        } else {
            return null;
        }
    }       

    /**
     * Find all entities by locale
     *
     * @param string   $locale        Locale value
     * @param string   $result        ['array', 'object']
     * @param boolean  $INNER_JOIN
     * @param boolean  $is_checkRoles
     * @param boolean  $FALLBACK
     * @param boolean  $lazy_loading
     * 
     * @return object
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function getEntities($locale, $result = "object", $INNER_JOIN = true, $is_checkRoles = true, $FALLBACK = true, $lazy_loading = true)
    {
        $query = $this->_em->createQueryBuilder()
        ->select('c')
        ->from($this->_entityName, 'c')
        ;
        if (!is_null($this->basedOnNode)) {
            $query->where($qb->expr()->notIn(
                'c.id',
                $this->_em
                ->createQueryBuilder()
                ->select('n')
                ->from($this->_entityName, 'n')
                ->where('n.root = '.$this->basedOnNode->getRoot())
                ->andWhere($qb->expr()->between(
                        'n.lft',
                        $this->basedOnNode->getLeft(),
                        $this->basedOnNode->getRight()
                ))
                ->getDQL()
            ));
        }
        if ($is_checkRoles) {
            $query = $this->checkRoles($query);
        }

        return $this->findTranslationsByQuery($locale, $query->getQuery(), $result, $INNER_JOIN, $FALLBACK, $lazy_loading);
    }
    
    /**
     * Find all entities of the entity by list of ids
     *
     * @param interger $identifier
     * @param array    $parameters    array of all id values
     * @param string   $locale        Locale value
     * @param string   $result        ['array', 'object']
     * @param boolean  $INNER_JOIN
     * @param boolean  $is_checkRoles
     * @param boolean  $FALLBACK
     * @param boolean  $lazy_loading
     * 
     * @return object
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function getEntitiesByIds($identifier, array $parameters, $locale, $result = "object", $INNER_JOIN = true, $is_checkRoles = true, $FALLBACK = true, $lazy_loading = true)
    {
        $query = $this->_em->createQueryBuilder()
        ->select('c')
        ->from($this->_entityName, 'c')
        ->where($query->expr()->in(
            'c.'.$identifier,
            ':ids'
        ))
        ->setParameter('ids', $parameters, Connection::PARAM_INT_ARRAY)        
        ;
        if ($is_checkRoles) {
            $query = $this->checkRoles($query);
        }

        return $this->findTranslationsByQuery($locale, $query->getQuery(), $result, $INNER_JOIN, $FALLBACK, $lazy_loading);
    }
    
    /**
     * Find a translation field of an entity by its id
     *
     * @param string  $locale
     * @param array   $fields
     * @param bool    $INNER_JOIN
     * 
     * @return object
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function getContentByField($locale, array $fields, $INNER_JOIN = false)
    {
        $query    = $this->_em->createQuery("SELECT p FROM {$this->_entityTranslationName} p  WHERE p.locale = :locale and p.field = :field and p.content = :content ");
        $query->setParameter('locale', $locale);
        $query->setParameter('field', array_keys($fields['content_search']));
        $query->setParameter('content', array_values($fields['content_search']));
        $query->setMaxResults(1);
        $entities = $query->getResult();            
        if (!is_null($entities)){
            $entity = current($entities);
            if (is_object($entity)){
                $id    = $entity->getObject()->getId();           
                $query = $this->_em->createQuery("SELECT p FROM {$this->_entityTranslationName} p  WHERE p.locale = :locale and p.field = :field and p.object = :objectId");
                $query->setParameter('locale', $locale);
                $query->setParameter('objectId', $id);
                $query->setParameter('field', $fields['field_result']);
                $query->setMaxResults(1);
                $entities = $query->getResult();           
                if (!is_null($entities) && (count($entities)>=1) ){
                    return current($entities);
                } else {
                    return null;
                }
            } else {
                return null;
            }
        } else {
            return null;
        }
        //         $dql = <<<___SQL
        //   SELECT a
        //   FROM {$this->_entityName} a
        //   WHERE a.slug = '{$slug}'
        // ___SQL;
    
        //         $query  = $this->_em->createQuery($dql);
        //         $result = $this->findTranslationsByQuery($locale, $query, $result, $INNER_JOIN);
    
    
        //         print_r(count($result));exit;
    
        //         return current($result);
    }
    
    /**
     * Find a translation of an entity by its id
     *
     * @param string  $locale
     * @param array   $fields
     * @param string  $result     ['array', 'object']
     * @param boolean $INNER_JOIN
     * 
     * @return null|object
     * @access public
     * @author Etienne de Longeaux <etienne.delongeaux@gmail.com>
     */
    public function getEntityByField($locale, array $fields, $result = "object", $INNER_JOIN = false)
    {
        $query    = $this->_em->createQuery("SELECT p FROM {$this->_entityTranslationName} p  WHERE p.locale = :locale and p.field = :field and p.content = :content ");
        $query->setParameter('locale', $locale);
        $query->setParameter('field', array_keys($fields['content_search']));
        $query->setParameter('content', array_values($fields['content_search']));
        $query->setMaxResults(1);
        $entities = $query->getResult();    
        if (!is_null($entities)){
            $entity = current($entities);    
            if (is_object($entity)){
                $id        = $entity->getObject()->getId();
                return $this->findOneByEntity($locale, $id, $result, $INNER_JOIN);
            } else {
                return null;
            }
        } else {
            return null;
        }
    }    
}